// Generated by CoffeeScript 1.4.0
(function() {
  var CSSModule, JSModule, MODULE_CONTENT_TYPE, Module, ModuleConfig, ModulePath, md5, parser, syspath, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  syspath = require('path');

  utils = require('../../util');

  md5 = require("MD5");

  parser = require('../parser');

  ModulePath = require('./path').ModulePath;

  ModuleConfig = require('./config').ModuleConfig;

  MODULE_CONTENT_TYPE = {
    JAVASCRIPT: "javascript",
    CSS: "css"
  };

  /* ---------------------------
      模块即为单一文件
  */


  Module = (function() {

    function Module(uri) {
      this.path = new ModulePath(uri);
      this.config = new ModuleConfig(uri);
      this.guid = md5(this.path.getFullPath());
      this.depends = [];
      this.ast = null;
    }

    Module.prototype.hasDependencies = function() {
      return this.depends.length > 0;
    };

    Module.prototype.analyze = function(doneCallback) {
      var self;
      self = this;
      return this._process(this.path.getFullPath(), function(err, source) {
        self.ast = parser.parseAST(source);
        self.ast.find('REQUIRE', function(node) {
          var module;
          module = Module.parse(node.value, self);
          node.module = module;
          self.depends.push(module);
          return self.analyzed();
        });
        return doneCallback.call(self, err);
      });
    };

    Module.prototype.analyzed = function() {};

    Module.prototype._process = function(path, cb) {
      var ext, plugin, txt;
      txt = new utils.file.reader().read(path);
      ext = syspath.extname(path);
      plugin = ModulePath.getPlugin(ext);
      if (plugin) {
        return plugin.process(txt, path, function(err, result) {
          if (err) {
            return cb("文件编译错误 " + path + " , " + (err.toString()), "");
          } else {
            return cb(err, result);
          }
        });
      } else {
        return cb("找不到对应后缀名(" + ext + ")的编译方案 " + path);
      }
    };

    Module.prototype.getSourceWithoutDependencies = function() {
      return null;
    };

    Module.prototype.getDependenciesURI = function(parent_uris) {
      var m, uris, _i, _len, _ref;
      uris = parent_uris || {};
      _ref = this.depends;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        uris[m.guid] = 1;
        if (m.hasDependencies()) {
          m.getDependenciesURI(uris);
        }
      }
      uris[this.guid] = 1;
      return uris;
    };

    return Module;

  })();

  Module.parse = function(path, parentModule) {
    var uri;
    if (parentModule) {
      uri = ModulePath.resolvePath(path, parentModule);
    } else {
      uri = path;
    }
    switch (ModulePath.getContentType(syspath.extname(uri))) {
      case MODULE_CONTENT_TYPE.JAVASCRIPT:
        return new JSModule(uri);
      case MODULE_CONTENT_TYPE.CSS:
        return new CSSModule(uri);
    }
  };

  Module.addExtensionPlugin = function(extName, plugin) {
    return ModulePath.addExtensionPlugin(extName, plugin);
  };

  JSModule = (function(_super) {

    __extends(JSModule, _super);

    function JSModule(uri) {
      JSModule.__super__.constructor.call(this, uri);
    }

    JSModule.prototype.analyzed = function() {
      if (this.config.isCompileTypeNormal()) {
        return this.ast.defineType('REQUIRE', function(node) {
          return "";
        });
      } else if (this.config.isCompileTypeModular()) {
        return this.ast.defineType('REQUIRE', function(node) {
          return "__context.____MODULES['" + node.module.guid + "'];";
        });
      } else {
        throw "找不到正确的编译方式, 请修改fekit.config中的 compiler [目前值:" + (this.config.compileType()) + "]";
      }
    };

    JSModule.prototype._wrap = function(source) {
      return "\n;(function(__context){\n    var module = {\n        id : \"" + this.guid + "\" , \n        filename : \"" + (this.path.getFullPath()) + "\" ,\n        exports : {}\n    };\n    if( !__context.____MODULES ) { __context.____MODULES = {}; }\n    var r = (function( exports , module , global ){\n\n    " + source + "\n\n    })( module.exports , module , __context );\n    __context.____MODULES[ \"" + this.guid + "\" ] = module.exports;\n})(this);\n";
    };

    JSModule.prototype.getSourceWithoutDependencies = function() {
      if (this.config.isCompileTypeNormal()) {
        return this.ast.print();
      }
      if (this.config.isCompileTypeModular()) {
        return this._wrap(this.ast.print());
      }
      throw "找不到正确的编译方式, 请修改fekit.config中的 compiler [目前值:" + (this.config.compileType()) + "]";
    };

    return JSModule;

  })(Module);

  CSSModule = (function(_super) {

    __extends(CSSModule, _super);

    function CSSModule(uri) {
      CSSModule.__super__.constructor.call(this, uri);
    }

    CSSModule.prototype.analyzed = function() {
      return this.ast.defineType('REQUIRE', function(node) {
        return "";
      });
    };

    CSSModule.prototype.getSourceWithoutDependencies = function() {
      return this.ast.print();
    };

    return CSSModule;

  })(Module);

  exports.Module = Module;

}).call(this);
