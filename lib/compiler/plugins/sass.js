// Generated by CoffeeScript 1.4.0
(function() {
  var MAP, convertRegexp, css, extNames, fixFilePath, fs, getWholeScssFile, grep_import, regstr, sass, syspath, utils;

  utils = require('../../util');

  css = require('./css');

  fs = require('fs');

  syspath = require('path');

  sass = require('node-sass');

  MAP = {};

  convertRegexp = function(str, flag) {
    str = str.replace(/\s/g, '').replace('{space}', ' ');
    return new RegExp(str, flag);
  };

  regstr = convertRegexp("(\n    ?: [{space}]*@import\\s*\\s*'([^']+)'\\s*\n    |  [{space}]*@import\\s*\\s*\"([^\"]+)\"\\s*\n)\n[{space};]*", "g");

  grep_import = function(txt, basedir) {
    return txt.replace(regstr, function($0, $1, $2) {
      var p;
      p = utils.path.join(basedir, $1 || $2);
      if (MAP[p]) {
        return "";
      } else {
        MAP[p] = true;
        return $0;
      }
    });
  };

  extNames = ['sass', 'scss', 'css'];

  fixFilePath = function(filePath) {
    var baseName, dirName, eName, extName, privatePath, _i, _len;
    extName = syspath.extname(filePath);
    baseName = syspath.basename(filePath);
    dirName = syspath.dirname(filePath);
    if (extName && fs.existsSync(filePath)) {
      return filePath;
    }
    if (!extName) {
      for (_i = 0, _len = extNames.length; _i < _len; _i++) {
        eName = extNames[_i];
        if (fs.existsSync(filePath + '.' + eName)) {
          return filePath + '.' + eName;
        }
        privatePath = syspath.join(dirName, '_' + baseName + '.' + eName);
        if (fs.existsSync(privatePath)) {
          return privatePath;
        }
      }
    } else {
      privatePath = syspath.join(dirName, '_' + baseName);
      if (fs.existsSync(privatePath)) {
        return privatePath;
      }
    }
    throw new Error('找不到import文件: ' + filePath);
  };

  getWholeScssFile = function(filePath, imports) {
    var data;
    imports = imports || {};
    filePath = fixFilePath(filePath);
    if (imports[filePath] !== true) {
      imports[filePath] = true;
      data = '\n' + new utils.file.reader().read(filePath);
      if (data) {
        data = data.replace(/\/\*.+?\*\/|\n\s*\/\/.*(?=[\n\r])/gm, '');
      }
      return data.replace(/@import.*[\'\"](.+)[\'\"].*/g, function(a, b) {
        return getWholeScssFile(syspath.join(syspath.dirname(filePath), b), imports) + '\n';
      });
    } else {
      return '';
    }
  };

  exports.contentType = "css";

  exports.process = function(txt, path, module, cb) {
    var dir, fail, succ;
    dir = syspath.dirname(path);
    succ = function(code) {
      return cb(null, css.ddns(code, module));
    };
    fail = function(err) {
      return cb(err);
    };
    try {
      txt = getWholeScssFile(path);
      return sass.render({
        data: txt,
        includePaths: [dir],
        outputStyle: "expanded"
      }, function(err, result) {
        if (err) {
          return fail(err.file + ' at line ' + err.line + ' column ' + err.column + '\n' + err.message);
        } else {
          return succ(result.css.toString());
        }
      });
    } catch (err) {
      return fail(err);
    }
  };

}).call(this);
