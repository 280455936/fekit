// Generated by CoffeeScript 1.4.0
(function() {
  var CSSModule, Compiler, JSModule, MODULE_CONTENT_TYPE, MODULE_LINETYPE, MODULE_LINE_REGEXP, Module, ModuleConfig, ModulePath, addPlugin, async, fs, getSource, md5, pluginsDir, syspath, utils, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    _this = this;

  async = require('async');

  syspath = require('path');

  fs = require('fs');

  utils = require('../util');

  _ = require('underscore');

  md5 = require("MD5");

  MODULE_LINE_REGEXP = /^([^\\/]*)(@import\s+url|require)\s*\(\s*(?:["'])(.*?)(?:["'])\s*\)[\s;]*$/;

  /* ---------------------------
      模块即为单一文件
  */


  Module = (function() {

    function Module(uri) {
      this.path = new ModulePath(uri);
      this.config = new ModuleConfig(uri);
      this.compiler = new Compiler();
      this.guid = md5(this.path.getFullPath());
      this.depends = [];
      this.sources = [];
    }

    Module.prototype._getPlaceHolder = function(line) {
      return null;
    };

    Module.prototype._check = function(line) {
      if (MODULE_LINE_REGEXP.test(line)) {
        return MODULE_LINETYPE.IMPORT_LINE;
      } else {
        return MODULE_LINETYPE.NORMAL_LINE;
      }
    };

    Module.prototype.hasDependencies = function() {
      return this.depends.length > 0;
    };

    Module.prototype.analyze = function(doneCallback) {
      var self,
        _this = this;
      self = this;
      this.sources = [];
      return this.compiler.readlines(this.path.getFullPath(), function(err, lines) {
        var line, module, _i, _len;
        for (_i = 0, _len = lines.length; _i < _len; _i++) {
          line = lines[_i];
          switch (_this._check(line)) {
            case MODULE_LINETYPE.NORMAL_LINE:
              _this.sources.push(line);
              break;
            case MODULE_LINETYPE.IMPORT_LINE:
              module = Module.parse(line, _this);
              _this.depends.push(module);
              _this.sources.push(module._getPlaceHolder(line));
          }
        }
        return doneCallback.call(self, err);
      });
    };

    Module.prototype.getSourceWithoutDependencies = function() {
      return null;
    };

    Module.prototype.getDependenciesURI = function(parent_uris) {
      var m, uris, _i, _len, _ref;
      uris = parent_uris || {};
      _ref = this.depends;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        uris[m.guid] = 1;
        if (m.hasDependencies()) {
          m.getDependenciesURI(uris);
        }
      }
      uris[this.guid] = 1;
      return uris;
    };

    return Module;

  })();

  JSModule = (function(_super) {

    __extends(JSModule, _super);

    function JSModule(uri) {
      JSModule.__super__.constructor.call(this, uri);
    }

    JSModule.prototype._getPlaceHolder = function(line) {
      var _this = this;
      if (this.config.isCompileTypeNormal()) {
        return "";
      }
      if (this.config.isCompileTypeModular()) {
        return line.replace(MODULE_LINE_REGEXP, function(match, prefix, keyword, path) {
          return "" + prefix + "__context.____MODULES['" + _this.guid + "'];";
        });
      }
      throw "找不到正确的编译方式, 请修改fekit.config中的 compiler [目前值:" + (this.config.compileType()) + "]";
    };

    JSModule.prototype._wrap = function() {
      return "\n;(function(__context){\n    var module = {\n        id : \"" + this.guid + "\" , \n        filename : \"" + (this.path.getFullPath()) + "\" ,\n        exports : {}\n    };\n    if( !__context.____MODULES ) { __context.____MODULES = {}; }\n    var r = (function( exports ){\n\n    " + (this.sources.join(utils.file.NEWLINE)) + "\n\n    })( module.exports , module );\n    __context.____MODULES[ \"" + this.guid + "\" ] = module.exports;\n})(this);\n";
    };

    JSModule.prototype.getSourceWithoutDependencies = function() {
      if (this.config.isCompileTypeNormal()) {
        return this.sources.join(utils.file.NEWLINE);
      }
      if (this.config.isCompileTypeModular()) {
        return this._wrap();
      }
      throw "找不到正确的编译方式, 请修改fekit.config中的 compiler [目前值:" + (this.config.compileType()) + "]";
    };

    return JSModule;

  })(Module);

  CSSModule = (function(_super) {

    __extends(CSSModule, _super);

    function CSSModule(uri) {
      CSSModule.__super__.constructor.call(this, uri);
    }

    CSSModule.prototype._getPlaceHolder = function(line) {
      return "";
    };

    CSSModule.prototype.getSourceWithoutDependencies = function() {
      return this.sources.join(utils.file.NEWLINE);
    };

    return CSSModule;

  })(Module);

  Module.parse = function(line, parentModule) {
    var uri;
    if (parentModule) {
      uri = ModulePath.resolvePath(line.match(MODULE_LINE_REGEXP)[3], parentModule);
    } else {
      uri = line;
    }
    switch (Compiler.getContentType(syspath.extname(uri))) {
      case MODULE_CONTENT_TYPE.JAVASCRIPT:
        return new JSModule(uri);
      case MODULE_CONTENT_TYPE.CSS:
        return new CSSModule(uri);
    }
  };

  /* ---------------------------
      模块路径
  */


  ModulePath = (function() {

    function ModulePath(uri) {
      this.uri = uri;
    }

    ModulePath.prototype.parseify = function(path_without_extname) {
      var extname;
      extname = this.extname();
      if (~ModulePath.EXTLIST.indexOf(extname)) {
        return utils.file.findify(path_without_extname, ModulePath.EXTLIST);
      }
      throw "not found extname for compile [" + extname + "]";
    };

    ModulePath.prototype.extname = function() {
      return syspath.extname(this.uri);
    };

    ModulePath.prototype.dirname = function() {
      return syspath.dirname(this.uri);
    };

    ModulePath.prototype.getFullPath = function() {
      return this.uri;
    };

    ModulePath.prototype.getContentType = function() {
      return Compiler.getContentType(this.extname());
    };

    return ModulePath;

  })();

  /*
      解析子模块真实路径
  
      子模块路径表现形式可以是
          省略后缀名方式, 该方式会认为子模块后缀名默认与parentModule相同
              a/b/c
              a.b.c
              
              后缀名默认匹配顺序为, 如果都找不到就会报错
              [javascript]
              .js / .coffee / .mustache 
              [css]
              .css / .less
  
      子模块的
  
      子模块路径分2种
      1, 相对路径, 相对于父模块的dirname. 如 a/b/c
      2, 库引用路径, 库是由配置指定的路径. 如 core/a/b/c , core是在配置文件中进行配置的
  */


  ModulePath.resolvePath = function(path, parentModule) {
    var i, part, parts, path_without_extname, result, truelypath, _i, _len;
    parts = utils.path.split_path(path, ModulePath.EXTLIST);
    result = [];
    for (i = _i = 0, _len = parts.length; _i < _len; i = ++_i) {
      part = parts[i];
      if (i === 0) {
        if (parentModule.config.isUseLibrary(part)) {
          result.push(parentModule.config.parseLibrary(part));
        } else {
          result.push(parentModule.path.dirname());
          result.push(part);
        }
      } else {
        result.push(part);
      }
    }
    path_without_extname = syspath.join.apply(syspath, result);
    truelypath = parentModule.path.parseify(path_without_extname);
    utils.logger.info("[COMPILE] 解析子模块真实路径 " + path + " >>>> " + truelypath);
    return truelypath;
  };

  ModulePath.EXTLIST = [];

  /* ---------------------------
      模块配置
      该配置是由指定文件的路径向上迭代得到的, 直到遇见fekit.config文件
  
      {
          //库的配置
          "lib" : {
              "core" : "./scripts/core"
          }
      }
  */


  ModuleConfig = (function() {

    function ModuleConfig(uri) {
      this.uri = uri;
      this.config = utils.config.parse(this.uri);
    }

    ModuleConfig.prototype.compileType = function() {
      return this.config.root.compiler;
    };

    ModuleConfig.prototype.isCompileTypeNormal = function() {
      return !this.config.root.compiler;
    };

    ModuleConfig.prototype.isCompileTypeModular = function() {
      return this.config.root.compiler === "modular";
    };

    ModuleConfig.prototype.isUseLibrary = function(libname) {
      return !!this.config.root.lib[libname];
    };

    ModuleConfig.prototype.parseLibrary = function(libname) {
      var path;
      path = this.config.root.lib[libname];
      if (!path) {
        return libname;
      } else {
        return syspath.join(this.config.fekit_root_dirname, path);
      }
    };

    return ModuleConfig;

  })();

  /* ---------------------------
      模块中单行类型
  */


  MODULE_LINETYPE = {
    NORMAL_LINE: 0,
    IMPORT_LINE: 1
  };

  MODULE_CONTENT_TYPE = {
    JAVASCRIPT: "javascript",
    CSS: "css"
  };

  /* ---------------------------
      不同文件的编译方案
  */


  Compiler = (function() {

    function Compiler() {}

    Compiler.prototype.readlines = function(path, cb) {
      var ext, txt;
      txt = new utils.file.reader().read(path);
      ext = syspath.extname(path);
      if (Compiler.TYPES[ext]) {
        return Compiler.TYPES[ext].process(txt, path, function(err, result) {
          if (err) {
            return cb("文件编译错误 " + path + " , " + (err.toString()), []);
          } else {
            return cb(err, result.split(utils.file.NEWLINE));
          }
        });
      } else {
        return cb("找不到对应后缀名(" + ext + ")的编译方案 " + path);
      }
    };

    return Compiler;

  })();

  Compiler.TYPES = {};

  Compiler.getContentType = function(extName) {
    var _ref;
    return (_ref = Compiler.TYPES[extName]) != null ? _ref.contentType : void 0;
  };

  /* ---------------------------
      插件系统
  */


  addPlugin = function(extName, plugin) {
    ModulePath.EXTLIST.push(extName);
    return Compiler.TYPES[extName] = plugin;
  };

  pluginsDir = syspath.join(syspath.dirname(__filename), "plugins");

  utils.path.each_directory(pluginsDir, function(filepath) {
    var extname, type;
    extname = syspath.extname(filepath);
    type = "." + syspath.basename(filepath, extname);
    return addPlugin(type, require(filepath));
  });

  /* -----------------------
      export
  */


  getSource = function(module, options, callback) {
    return module.analyze(function(err) {
      var USED_MODULES, arr, deps, sub_module, _i, _len, _ref, _tmp;
      if (err) {
        callback(err);
        return;
      }
      arr = [];
      USED_MODULES = options.use_modules;
      if (options.render_dependencies) {
        module.getSourceWithoutDependencies = options.render_dependencies;
      }
      deps = [];
      if (options.no_dependencies !== true) {
        _ref = module.depends;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sub_module = _ref[_i];
          _tmp = function(sub_module) {
            var _this = this;
            return function(seriesCallback) {
              if (USED_MODULES[sub_module.guid]) {
                process.nextTick(seriesCallback);
                return;
              }
              return getSource(sub_module, options, function(e, txt) {
                arr.push(txt);
                return process.nextTick(function() {
                  return seriesCallback(e);
                });
              });
            };
          };
          deps.push(_tmp(sub_module));
        }
      }
      return async.series(deps, function(err) {
        if (err) {
          callback(err);
          return;
        }
        arr.push(module.getSourceWithoutDependencies());
        USED_MODULES[module.guid] = 1;
        return callback(null, arr.join(utils.file.NEWLINE));
      });
    });
  };

  exports.Module = Module;

  exports.MODULE_LINE_REGEXP = MODULE_LINE_REGEXP;

  /*
   options {
      // 依赖的文件列表(fullpath)
      dependencies_filepath_list : []
      // 使用非依赖模式
      no_dependencies : false , 
      // 非依赖模式的生成方案
      render_dependencies : function
   }
  */


  exports.compile = function(filepath, options, doneCallback) {
    var module, use_modules, _done, _iter, _list;
    if (arguments.length === 3) {
      options = options || {};
      doneCallback = doneCallback;
    } else if (arguments.length === 2) {
      doneCallback = options;
      options = {};
    }
    use_modules = {};
    module = Module.parse(filepath);
    _list = options.dependencies_filepath_list || [];
    _iter = function(dep_path, seriesCallback) {
      var parent_module;
      parent_module = new Module(dep_path);
      return parent_module.analyze(function(err) {
        _.extend(use_modules, parent_module.getDependenciesURI());
        return seriesCallback(err);
      });
    };
    _done = function(err) {
      if (err) {
        doneCallback(err);
        return;
      }
      return getSource(module, {
        use_modules: use_modules,
        no_dependencies: !!options.no_dependencies,
        render_dependencies: options.render_dependencies
      }, function(err, result) {
        return doneCallback(err, result);
      });
    };
    return utils.async.series(_list, _iter, _done);
  };

}).call(this);
