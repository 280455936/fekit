// Generated by CoffeeScript 1.3.3
(function() {
  var Compiler, convertRegexp, fs, getVal, parse;

  fs = require('fs');

  getVal = function(regexpResult) {
    var idx, r, _i, _len;
    for (idx = _i = 0, _len = regexpResult.length; _i < _len; idx = ++_i) {
      r = regexpResult[idx];
      if (idx === 0) {
        continue;
      }
      if (r) {
        return r;
      }
    }
  };

  convertRegexp = function(str) {
    return str.replace(/\s/g, '').replace('{space}', ' ');
  };

  parse = function(str) {
    var REG, end, r, regstr, result, start;
    result = [];
    regstr = convertRegexp("(\n    ?: require\\s*\\(\\s*'([^']+)'\\s*\\)\n    |  require\\s*\\(\\s*\"([^\"]+)\"\\s*\\)\n    |  @import\\s+url\\s*\\(\\s*'([^']+)'\\s*\\)\n    |  @import\\s+url\\s*\\(\\s*\"([^\"]+)\"\\s*\\)\n    |  @import\\s+url\\s*\\(\\s*([^\\)]+)\\s*\\)\n)\n[{space};]*");
    REG = new RegExp(regstr, "g");
    start = end = 0;
    while ((r = REG.exec(str)) !== null) {
      end = REG.lastIndex - r[0].length;
      result.push(str.substring(start, end));
      result.push({
        type: 'require',
        value: getVal(r)
      });
      start = REG.lastIndex;
    }
    result.push(str.substring(start));
    return result;
  };

  Compiler = (function() {

    function Compiler(ast) {
      this.ast = ast;
    }

    Compiler.prototype.print = function() {
      var i, line, list, type;
      list = [];
      i = 0;
      while (i < this.ast.length) {
        line = this.ast[i];
        if (typeof line === "string") {
          list.push(line);
        } else {
          type = line.type;
          if (this["print_" + type]) {
            list.push(this["print_" + type](line));
          } else {
            list.push(this["print_"](line));
          }
        }
        i++;
      }
      return list.join("");
    };

    Compiler.prototype.find = function(type, cb) {
      var i, line, list;
      list = [];
      type = (type || "").toLowerCase();
      i = 0;
      while (i < this.ast.length) {
        line = this.ast[i];
        if (line.type === type) {
          cb && cb(line);
          list.push(line);
        }
        i++;
      }
      return list;
    };

    Compiler.prototype.defineType = function(type, func) {
      type = (type || "").toLowerCase();
      return this["print_" + type] = func;
    };

    Compiler.prototype.print_ = function(line) {
      if (typeof line === "string") {
        return line;
      } else {
        return JSON.stringify(line);
      }
    };

    return Compiler;

  })();

  exports.parseAST = function(source) {
    var ast, compiler;
    ast = parse(source);
    compiler = new Compiler(ast);
    return compiler;
  };

}).call(this);
