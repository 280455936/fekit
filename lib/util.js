// Generated by CoffeeScript 1.4.0
(function() {
  var FekitConfig, Reader, UrlConvert, Writer, child_process, cjson, fs, mkdirp, syspath, utilarray, utilconfig, utilfile, utillogger, utilpath, utilproc, utilsys, yaml, _, _closest;

  child_process = require('child_process');

  syspath = require('path');

  fs = require('fs');

  mkdirp = require('mkdirp');

  yaml = require('yaml');

  cjson = require('cjson');

  _ = require('underscore');

  exports.array = utilarray = {
    clear_empty: function(array) {
      var i, n, _i, _len;
      n = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        i = array[_i];
        if (i !== "" || i !== null) {
          n.push(i);
        }
      }
      return n;
    }
  };

  exports.path = utilpath = {
    closest: function(path, findfilename) {
      return _closest(path, findfilename);
    },
    SEPARATOR: syspath.join('a', 'a').replace(/a/g, ''),
    exists: function(path) {
      if (fs.existsSync) {
        return fs.existsSync(path);
      }
      if (syspath.existsSync) {
        return syspath.existsSync(path);
      }
    },
    split_path: function(path, ext_list) {
      var ext, parts;
      if (~path.indexOf("/")) {
        parts = path.split("/");
      } else if (~path.indexOf("\\")) {
        parts = path.split("\\");
      } else {
        parts = path.split(".");
      }
      parts = utilarray.clear_empty(parts);
      ext = "." + parts[parts.length - 1];
      if (~ext_list.indexOf(ext)) {
        parts = parts.slice(0, parts.length - 1);
        parts[parts.length - 1] = parts[parts.length - 1] + ext;
      }
      return parts;
    },
    is_directory: function(path) {
      var stats;
      try {
        stats = fs.lstatSync(path);
        return stats.isDirectory();
      } catch (err) {
        throw err;
        return false;
      }
    },
    each_directory: function(path, cb) {
      var f, list, p, _i, _len, _results;
      if (!utilpath.is_directory(path)) {
        path = syspath.dirname(path);
      }
      list = fs.readdirSync(path);
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        f = list[_i];
        p = syspath.join(path, f);
        if (f !== "." && f !== ".." && !utilpath.is_directory(p)) {
          _results.push(cb(p));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    existsFiles: function(root, filenames) {
      var name, p, _i, _len;
      for (_i = 0, _len = filenames.length; _i < _len; _i++) {
        name = filenames[_i];
        p = syspath.join(root, name);
        if (fs.existsSync(p)) {
          return p;
        }
      }
      throw "找不到文件列表中的任一文件 " + root + " 下的 [" + (filenames.join()) + "]";
    },
    is_absolute_path: function(path) {
      return (process.platform === "win32" && p.match(/^[a-zA-Z]:(\\|\/)?$/)) || path.charAt(0) === "/";
    }
  };

  _closest = function(p, findfilename) {
    var dir, file, files, _i, _len;
    if (p === "/" || (process.platform === "win32" && p.match(/^[a-zA-Z]:(\\|\/)?$/))) {
      return null;
    }
    if (utilpath.is_directory(p)) {
      dir = p;
    } else {
      dir = syspath.dirname(p);
    }
    files = fs.readdirSync(dir);
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (file === findfilename) {
        return dir;
      }
    }
    return _closest(syspath.dirname(dir), findfilename);
  };

  Reader = (function() {

    function Reader() {}

    Reader.prototype.readlines = function(filepath) {
      return this.read(filepath).toString().split(utilfile.NEWLINE);
    };

    Reader.prototype.read = function(filepath) {
      if (!utilpath.exists(filepath)) {
        throw "找不到文件 " + filepath;
      }
      return fs.readFileSync(filepath).toString().replace(/\r\n/g, '\n');
    };

    Reader.prototype.readJSON = function(filepath) {
      try {
        return cjson.load(filepath);
      } catch (err) {
        throw "解析 " + filepath + " 时出现错误, 请检查该文件, 该文件必须是标准JSON格式";
      }
    };

    Reader.prototype.readYAML = function(filepath) {
      var code, line, lines, s, _i, _len;
      lines = this.readlines(filepath);
      s = [];
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        if (/.*?:\s*[^\s]+/.test(line)) {
          s.push(line.replace(/^(.*?):\s*(.*?)\s*$/, "$1: '$2'"));
        } else {
          s.push(line);
        }
      }
      code = s.join(utilfile.NEWLINE);
      try {
        return yaml["eval"](code);
      } catch (err) {
        throw "解析 " + filepath + " 时出现错误, 请检查该文件, 该文件必须是标准YAML格式";
      }
    };

    return Reader;

  })();

  Writer = (function() {

    function Writer() {}

    Writer.prototype.write = function(filepath, content) {
      if (!utilpath.exists(syspath.dirname(filepath))) {
        mkdirp.sync(syspath.dirname(filepath));
      }
      return fs.writeFileSync(filepath, content);
    };

    return Writer;

  })();

  exports.file = utilfile = {};

  utilfile.reader = Reader;

  utilfile.writer = Writer;

  utilfile.NEWLINE = '\n';

  utilfile.copy = function(srcFile, destFile) {
    var BUF_LENGTH, buff, bytesRead, fdr, fdw, pos;
    BUF_LENGTH = 64 * 1024;
    buff = new Buffer(BUF_LENGTH);
    fdr = fs.openSync(srcFile, 'r');
    fdw = fs.openSync(destFile, 'w');
    bytesRead = 1;
    pos = 0;
    while (bytesRead > 0) {
      bytesRead = fs.readSync(fdr, buff, 0, BUF_LENGTH, pos);
      fs.writeSync(fdw, buff, 0, bytesRead);
      pos += bytesRead;
    }
    fs.closeSync(fdr);
    return fs.closeSync(fdw);
  };

  utilfile.findify = function(path_without_extname, ext_list) {
    var ext, list, path, _i, _len;
    list = [""].concat(ext_list);
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      ext = list[_i];
      path = path_without_extname + ext;
      if (utilpath.exists(path)) {
        return path;
      }
    }
    throw "找不到文件或对应的编译方案 [" + path_without_extname + "] 后缀检查列表为[" + ext_list + "]";
  };

  /*
      {
          // 库配置
          "lib" : {
              "core" : "./src/scripts/core"
          } ,
          // 导出配置 , 默认是以src为根目录
          // 输出至 dev 就变为 scripts/page-a@dev.js
          // 输出至 prd 就变为 scripts/page-a@(md5).js
          "export" : [
              "scripts/page-a.js"
          ] ,
          // sync 使用的配置
          "dev" : {
              "host" : "127.0.0.1"
              "path" : "/home/q/"
          }
      }
  */


  FekitConfig = (function() {

    function FekitConfig(baseUri) {
      this.baseUri = baseUri;
      this.fekit_config_filename = "fekit.config";
      this.fekit_root_dirname = utilpath.closest(this.baseUri, this.fekit_config_filename);
      this.fekit_config_path = syspath.join(this.fekit_root_dirname, this.fekit_config_filename);
      try {
        this.root = new utilfile.reader().readJSON(this.fekit_config_path);
        if (!this.root.lib) {
          this.root.lib = {};
        }
      } catch (err) {
        if (utilpath.exists(this.fekit_config_path)) {
          throw "@fekit_config_filename 解析失败, 请确认该文件格式是否符合正确的JSON格式";
        } else {
          this.root = {
            "lib": {},
            "export": []
          };
        }
      }
    }

    FekitConfig.prototype.each_export_files = function(cb) {
      var file, list, parents, path, _i, _len, _results,
        _this = this;
      list = this.root["export"] || [];
      _results = [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        file = list[_i];
        if (_.isObject(file)) {
          path = syspath.join(this.fekit_root_dirname, "src", file.path);
          parents = _.map(file.parents || [], function(ppath) {
            return syspath.join(_this.fekit_root_dirname, "src", ppath);
          });
        } else {
          path = syspath.join(this.fekit_root_dirname, "src", file);
          parents = [];
        }
        if (utilpath.exists(path)) {
          _results.push(cb(path, parents));
        } else {
          _results.push(utillogger.error("找不到文件 " + path));
        }
      }
      return _results;
    };

    FekitConfig.prototype.findExportFile = function(filepath, cb) {
      var file, list, parents, path, _i, _len,
        _this = this;
      list = this.root["export"] || [];
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        file = list[_i];
        if (_.isObject(file)) {
          path = syspath.join(this.fekit_root_dirname, "src", file.path);
          parents = _.map(file.parents || [], function(ppath) {
            return syspath.join(_this.fekit_root_dirname, "src", ppath);
          });
        } else {
          path = syspath.join(this.fekit_root_dirname, "src", file);
          parents = [];
        }
        if (filepath === path) {
          cb(filepath, parents);
        }
      }
      return cb(filepath, []);
    };

    return FekitConfig;

  })();

  exports.config = utilconfig = {
    parse: function(baseUri) {
      return new FekitConfig(baseUri);
    }
  };

  UrlConvert = (function() {

    function UrlConvert(uri) {
      var baseuri, extname, filename, fnames,
        _this = this;
      this.uri = uri;
      this.REPLACE_STRING = "##REPLACE##";
      baseuri = this.uri.replace(/[\/\\](dev|prd|src)[\/\\]/, function($0, $1) {
        return "/" + _this.REPLACE_STRING + "/";
      });
      extname = syspath.extname(baseuri);
      filename = syspath.basename(baseuri, extname);
      baseuri = baseuri.replace(filename + extname, "");
      fnames = filename.split("@");
      this.baseuri = baseuri;
      this.extname = extname;
      this.filename = filename;
      this.fnames = fnames;
    }

    UrlConvert.prototype.to_prd = function(md5) {
      var name, prefix;
      prefix = this.baseuri.replace(this.REPLACE_STRING, "prd");
      name = this.fnames[0] + "@" + md5 + this.extname;
      return syspath.join(prefix, name);
    };

    UrlConvert.prototype.to_dev = function() {
      var name, prefix;
      prefix = this.baseuri.replace(this.REPLACE_STRING, "dev");
      name = this.fnames[0] + "@dev" + this.extname;
      return syspath.join(prefix, name);
    };

    UrlConvert.prototype.to_src = function() {
      var name, prefix;
      prefix = this.baseuri.replace(this.REPLACE_STRING, "src");
      name = this.fnames[0] + this.extname;
      return syspath.join(prefix, name);
    };

    UrlConvert.prototype.to_ver = function() {
      var name, prefix;
      prefix = this.baseuri.replace(this.REPLACE_STRING, "ver");
      name = this.fnames[0] + this.extname + ".ver";
      return syspath.join(prefix, name);
    };

    return UrlConvert;

  })();

  UrlConvert.PRODUCTION_REGEX = /\/prd\//;

  exports.UrlConvert = UrlConvert;

  exports.proc = utilproc = {
    exec: function(cmd) {
      var _this = this;
      return child_process.exec(cmd, function(error, stdout, stderr) {
        if (error) {
          return utillogger.error(error);
        }
      });
    }
  };

  exports.sys = utilsys = {
    isWindows: process.platform === 'win32'
  };

  exports.logger = utillogger = {
    debug: false,
    setup: function(options) {
      if (options && options.debug) {
        return utillogger.debug = true;
      }
    },
    info: function() {
      if (!utillogger.debug) {
        return;
      }
      return console.info("[TRACE] ", Array.prototype.join.call(arguments, " "));
    },
    error: function() {
      return console.info("[ERROR] ", Array.prototype.join.call(arguments, " "));
    },
    log: function() {
      return console.info("[LOG] ", Array.prototype.join.call(arguments, " "));
    }
  };

}).call(this);
