// Generated by CoffeeScript 1.4.0
(function() {
  var compiler, jsp, md5, minCode, pro, process_directory, process_single_file, syspath, uglifycss, utils;

  syspath = require('path');

  compiler = require("../compiler/compiler");

  utils = require("../util");

  md5 = require("MD5");

  uglifycss = require("uglifycss");

  jsp = require("uglify-js").parser;

  pro = require("uglify-js").uglify;

  exports.usage = "压缩/混淆项目文件";

  exports.set_options = function(optimist) {
    optimist.alias('f', 'filename');
    optimist.describe('f', '指定编译某个文件, 而不是当前目录. 处理后默认将文件放在同名目录下并加后缀 min');
    optimist.alias('o', 'output');
    optimist.describe('o', '指定单个文件编译的输出位置');
    optimist.alias('n', 'nopack');
    optimist.describe('n', '不进行压缩处理');
    optimist.alias('c', 'noSplitCSS');
    return optimist.describe('c', '不分割 css 为多行形式，默认分割');
  };

  process_directory = function(options) {
    var conf, script_global;
    script_global = {
      EXPORT_LIST: [],
      EXPORT_MAP: {}
    };
    conf = utils.config.parse(options.cwd);
    conf.each_export_files(function(srcpath, parents, opts) {
      var iter;
      iter = {
        url: srcpath,
        path: syspath.join("src", opts.partial_path)
      };
      script_global.EXPORT_LIST.push(iter);
      return script_global.EXPORT_MAP[opts.partial_path] = iter;
    });
    conf.doScript("premin", script_global);
    return conf.each_export_files_async(function(srcpath, parents, opts, seriesCallback) {
      var start, urlconvert, writer, _done;
      start = new Date();
      utils.logger.log("正在处理 " + srcpath);
      urlconvert = new utils.UrlConvert(srcpath, options.cwd);
      if (opts.no_version) {
        urlconvert.set_no_version();
      }
      writer = new utils.file.writer();
      _done = function(err, source) {
        var dest, final_code, md5code, _ref, _ref1;
        if (err) {
          utils.logger.error(err.toString());
          utils.exit(1);
          return;
        }
        final_code = minCode(urlconvert.extname, source, options);
        if (final_code !== null) {
          md5code = md5(final_code);
          dest = urlconvert.to_prd(md5code);
          writer.write(dest, final_code);
          writer.write(urlconvert.to_ver(), md5code);
          if ((_ref = script_global.EXPORT_MAP[opts.partial_path]) != null) {
            _ref.ver = md5code;
          }
          if ((_ref1 = script_global.EXPORT_MAP[opts.partial_path]) != null) {
            _ref1.minpath = dest.replace(options.cwd, "");
          }
          utils.logger.log("已经处理 [" + (new Date().getTime() - start.getTime()) + "ms] " + srcpath + "  ==> " + dest);
        } else {
          utils.logger.error("编译出现错误 " + srcpath);
        }
        return seriesCallback();
      };
      return compiler.compile(srcpath, {
        dependencies_filepath_list: parents
      }, _done);
    }, function() {
      conf.doScript("postmin", script_global);
      return utils.logger.log("DONE.");
    });
  };

  process_single_file = function(options) {
    var dest, extname, fname, srcpath;
    if (utils.path.is_absolute_path(options.filename)) {
      srcpath = options.filename;
    } else {
      srcpath = syspath.join(options.cwd, options.filename);
    }
    extname = syspath.extname(srcpath);
    fname = syspath.basename(srcpath);
    if (options.output) {
      if (utils.path.exists(options.output) && utils.path.is_directory(options.output)) {
        dest = utils.path.join(options.output, fname.replace(extname, ".min" + extname));
      } else {
        dest = options.output;
      }
    } else {
      dest = srcpath.replace(extname, ".min" + extname);
    }
    return compiler.compile(srcpath, function(err, source) {
      var final_code;
      final_code = minCode(extname, source, options);
      if (final_code !== null) {
        new utils.file.writer().write(dest, final_code);
        utils.logger.log("已经处理  " + srcpath + "  ==> " + dest);
      } else {
        utils.logger.error("编译出现错误 " + srcpath);
      }
      return utils.logger.log("DONE.");
    });
  };

  exports.minCode = minCode = function(extname, source, options) {
    var ast, final_code;
    if (options == null) {
      options = {};
    }
    if (options.nopack) {
      return source;
    }
    switch (extname) {
      case ".css":
        if (options.noSplitCSS) {
          final_code = uglifycss.processString(source);
        } else {
          final_code = uglifycss.processString(source).replace(/}/g, "}\n");
        }
        break;
      case ".js":
        try {
          ast = jsp.parse(source);
          ast = pro.ast_mangle(ast);
          final_code = pro.gen_code(ast);
        } catch (err) {
          console.info(err);
          return null;
        }
    }
    return final_code;
  };

  exports.run = function(options) {
    utils.logger.log("fekit(" + utils.version + ") min");
    if (options.filename) {
      return process_single_file(options);
    } else {
      return process_directory(options);
    }
  };

}).call(this);
