// Generated by CoffeeScript 1.4.0
(function() {
  var config_object, do_clean, do_export, start_export, sysfs, syspath, utils;

  syspath = require('path');

  sysfs = require('fs');

  utils = require('../util');

  exports.usage = "自动化生成 fekit.config 'export' 列表";

  config_object = {};

  do_clean = function(dir) {
    var exists, i, nu, _i, _len, _ref;
    nu = [];
    exists = function(path) {
      if (path.path != null) {
        path = path.path;
      }
      return utils.path.exists(utils.path.join(dir, path));
    };
    _ref = config_object["export"];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      if (exists(i)) {
        nu.push(i);
      }
    }
    return config_object["export"] = nu;
  };

  start_export = function(dir) {
    return utils.path.each_directory(dir, function(file) {
      if (utils.path.is_directory(file)) {
        start_export(file, dir);
        return;
      }
      if (~file.indexOf(".js") || ~file.indexOf(".css")) {
        return do_export(file);
      }
    }, true);
  };

  do_export = function(file, dir) {
    var content, exist, lines, path, _i, _j, _len, _len1, _ref, _ref1;
    content = new utils.file.reader().read(file);
    lines = content.split("\n");
    file = file.replace(/\\/g, "/");
    file = file.replace("" + dir + "/", "");
    if (lines[0] === "/*[export]*/") {
      _ref = CONFIG["export"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        path = _ref[_i];
        if (path === file) {
          exist = true;
        }
      }
      if (!exist) {
        CONFIG["export"].push(file);
      }
    }
    if (lines[0] === "/*[export noversion]*/") {
      _ref1 = CONFIG["export"];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        path = _ref1[_j];
        if (path.path === file) {
          exist = true;
        }
      }
      if (!exist) {
        return CONFIG["export"].push({
          path: file,
          no_version: true
        });
      }
    }
  };

  exports.run = function(options) {
    var base, config_file, dir, reader;
    base = options.cwd;
    dir = options._[1] || 'src';
    dir = utils.path.join(base, dir);
    config_file = utils.path.join(base, 'fekit.config');
    reader = new utils.file.reader();
    try {
      config_object = reader.readJSON(config_file);
    } catch (err) {
      return utils.logger.error(err);
    }
    return do_clean(dir);
  };

}).call(this);
