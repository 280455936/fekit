// Generated by CoffeeScript 1.4.0
(function() {
  var CONFIG, CSS_REG, CURR, FILE, JS_REG, check, findit, process_build, process_config, process_srclist, process_ver, spawn, sysfs, syspath, utils, _replaceSrclist;

  syspath = require('path');

  sysfs = require('fs');

  utils = require('../util');

  findit = require('findit');

  spawn = require('child_process').spawn;

  exports.usage = "转换 [qzz项目] 为 [fekit项目] ";

  exports.set_options = function(optimist) {};

  CURR = null;

  CONFIG = {
    "compiler": false,
    "lib": {},
    "export": []
  };

  FILE = function(name) {
    return syspath.join(CURR, name);
  };

  check = function() {
    if (!utils.path.exists(FILE(".ver"))) {
      return false;
    }
    if (utils.path.exists(FILE("fekit.config"))) {
      return false;
    }
    return true;
  };

  /*
  1. 处理 srclist
              a. 文件名变为普通
              b. 修改引用方式 document.write 变为 import , js/css的
  */


  process_srclist = function() {
    var add, add_list, file, files, remove_list, _i, _len,
      _this = this;
    files = findit.sync(CURR);
    add_list = [];
    remove_list = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      if (~file.indexOf('-srclist.') && !~file.indexOf(".svn")) {
        utils.logger.info("正在处理 " + file);
        add_list.push(_replaceSrclist(file));
        remove_list.push(file);
      }
    }
    add = spawn('svn', ['add'].concat(add_list));
    return add.on('exit', function(code) {
      return spawn('svn', ['rm'].concat(remove_list));
    });
  };

  JS_REG = /!!document\.write.*src=['"]([^'"]*)['"].*/g;

  CSS_REG = /@import\s+url\s*\(\s*['"]?([^'"\)]*)['"]?\s*\)/g;

  _replaceSrclist = function(filepath) {
    var content, dest, part, url,
      _this = this;
    url = new utils.UrlConvert(filepath);
    dest = url.to_src().replace('-srclist', '');
    content = new utils.file.reader().read(filepath);
    content = content.replace(JS_REG, function($0, $1) {
      return "@import('" + $1 + "');";
    });
    content = content.replace(CSS_REG, function($0, $1) {
      return "@import('" + $1 + "');";
    });
    new utils.file.writer().write(dest, content);
    if (~dest.indexOf('/src/')) {
      part = dest.split('/src/')[1];
    } else if (~dest.indexOf('\\src\\')) {
      part = dest.split('\\src\\')[1];
    }
    CONFIG["export"].push(part);
    return dest;
  };

  /*
      2. 处理 .ver 删除
  */


  process_ver = function() {
    return spawn('svn', ['remove', "" + (FILE('.ver'))]);
  };

  /*
      3. 处理 build.sh 修改
  */


  process_build = function() {};

  /*
      4. 生成 fekit.config
  */


  process_config = function() {
    var str;
    str = JSON.stringify(CONFIG, null, 4);
    return new utils.file.writer().write(FILE("fekit.config"), str);
  };

  /*
      恢复原状
      svn revert . -R && svn st | awk '{print $2}' | xargs rm
  */


  exports.run = function(options) {
    CURR = options.cwd;
    if (!check()) {
      utils.logger.error("当前目录不符合转换规则, 禁止转换");
      return;
    }
    process_srclist();
    process_ver();
    process_build();
    process_config();
    return utils.logger.info("转换完成.  转换日志在当前目录下的 convert.log ");
  };

}).call(this);
