// Generated by CoffeeScript 1.4.0
(function() {
  var Package, async, doneCallback, env, start, utils, _;

  _ = require('underscore');

  env = require('../env');

  utils = require('../util');

  async = require('async');

  Package = require('../package');

  exports.usage = "安装 fekit 组件 ";

  exports.set_options = function(optimist) {
    return optimist;
  };

  exports.run = function(options) {
    return start(options);
  };

  doneCallback = function(err) {
    if (err) {
      return utils.logger.error(err.toString());
    }
  };

  start = function(options) {
    var basepath, check_all_done, config, deps, p, spec_pkg, tasks, _name, _ver;
    spec_pkg = options['_'][1];
    basepath = utils.path.closest(options.cwd, Package.FEKIT_MODULE_DIR, true);
    if (!basepath) {
      basepath = options.cwd;
    }
    if (spec_pkg) {
      spec_pkg = spec_pkg.split('@');
      p = new Package(spec_pkg[0], spec_pkg[1], basepath);
      return p.preinstall(function(err) {
        if (err) {
          return doneCallback(err);
        }
        return p.install(function(err) {
          if (err) {
            return doneCallback(err);
          }
          return p.report();
        });
      });
    } else {
      config = utils.config.parse(utils.path.join(options.cwd, 'fekit.config'));
      deps = config.root.dependencies;
      if (_.size(deps || {}) === 0) {
        return;
      }
      tasks = (function() {
        var _results;
        _results = [];
        for (_name in deps) {
          _ver = deps[_name];
          _results.push(new Package(_name, _ver, basepath));
        }
        return _results;
      })();
      check_all_done = function(err) {
        if (err) {
          return doneCallback(err);
        }
        return async.each(tasks, function(pkg, done) {
          return pkg.install(function(err) {
            return done(err);
          });
        }, function(err) {
          var pkg, _i, _len;
          for (_i = 0, _len = tasks.length; _i < _len; _i++) {
            pkg = tasks[_i];
            pkg.report();
          }
          return doneCallback();
        });
      };
      return async.eachSeries(tasks, function(pkg, done) {
        return pkg.preinstall(function(err) {
          return done(err);
        });
      }, check_all_done);
    }
  };

}).call(this);
