// Generated by CoffeeScript 1.4.0
(function() {
  var contentType, fs, obsolete, path, spawn, sysurl, urlrouter, utils, velocity, _get_loader_path;

  fs = require("fs");

  obsolete = require("./velocity.obsolete");

  spawn = require("child_process").spawn;

  path = require("path");

  sysurl = require("url");

  urlrouter = require("urlrouter");

  utils = require('../util');

  velocity = require("velocity.java");

  contentType = {
    'Content-Type': "text/html;charset=UTF-8"
  };

  module.exports = function(options) {
    var ROOT, existsJava, projects, roots;
    ROOT = options.cwd;
    if (options["without-java"]) {
      existsJava = false;
    } else {
      existsJava = true;
      projects = fs.readdirSync(ROOT);
      projects = projects.filter(function(el) {
        return fs.existsSync(path.join(el, "fekit.config"));
      });
      roots = projects.map(function(el) {
        return _get_loader_path(utils.config.parse(path.join(ROOT, el)));
      });
      roots = roots.filter(function(el) {
        return el !== null;
      });
      roots.push(".");
      velocity.startServer({
        root: roots,
        callback: function(n) {
          return existsJava = !n;
        }
      });
    }
    return urlrouter(function(app) {
      return app.get(/\.(vm|vmhtml)\b/, function(req, res, next) {
        var conf, ctx, filename, p, root, url, vmjs_path, vmjson_path;
        utils.logger.log("existsJava is", existsJava);
        if (existsJava === false) {
          obsolete(req, res, next, options);
          return res.end();
        }
        url = sysurl.parse(req.url);
        p = path.join(ROOT, url.pathname);
        vmjs_path = p.replace('.vm', '.vmjs');
        vmjson_path = p.replace('.vm', '.json');
        conf = utils.config.parse(p);
        if (utils.path.exists(vmjs_path)) {
          delete require.cache[vmjs_path];
          ctx = utils.proc.requireScript(vmjs_path, {
            request: req,
            response: res,
            utils: utils
          });
        } else if (utils.path.exists(vmjson_path)) {
          ctx = utils.file.io.readJSON(vmjson_path);
        } else {
          ctx = {};
        }
        root = _get_loader_path(conf);
        if (root) {
          filename = path.relative(root, p);
        } else {
          filename = path.relative(".", p);
        }
        return velocity.render(filename, ctx, function(err, data) {
          if (err) {
            res.writeHead(500, contentType);
            res.write("<pre>" + err + "</pre>");
          } else {
            res.writeHead(200, contentType);
            res.write(data);
          }
          return res.end();
        });
      });
    });
  };

  _get_loader_path = function(conf) {
    var root, _ref, _ref1;
    root = conf != null ? (_ref = conf.root) != null ? (_ref1 = _ref.development) != null ? _ref1.velocity_root : void 0 : void 0 : void 0;
    if (root) {
      root = utils.path.join(conf.fekit_root_dirname, root);
      if (!fs.existsSync(root)) {
        root = utils.path.join(root, "../refs/vm");
      }
      if (!fs.existsSync(root)) {
        return null;
      } else {
        return root;
      }
    } else {
      return null;
    }
  };

}).call(this);
